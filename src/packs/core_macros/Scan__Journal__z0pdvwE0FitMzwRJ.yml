_id: z0pdvwE0FitMzwRJ
name: Scan (Journal)
type: script
author: jE81C9hyfb9evTbT
img: systems/lancer/assets/icons/macro-icons/tech_quick.svg
scope: global
command: >-
  //Sanity Check - Can this user even create folders and journal entries? Does
  the folder journal folder exist?

  if (JournalEntry.canUserCreate(game.user) == false) {
    ui.notifications.error(
      `${game.user.name} attempted to run SCAN to Journal but lacks proper permissions. Please correct and try again.`
    );
    return;
  }


  // ======================================================

  //Variables - Change these to control the macro

  // ======================================================


  // outputToChat - if set to true, also send the scan results to chat.

  const outputToChat = false;

  //journalFolderName - The name, as displayed in foundry, of the folder you
  want the journal entries to save to. Remember to enclose in quotes: 'example'

  const journalFolderName = "SCAN Database";

  //nameTemplate - The text before the scan number and target name. Remember to
  enclose in quotes: 'example'

  const nameTemplate = "SCAN: ";

  //numberLength - The total length of the scan number, extra spaces are filled
  with 0s. Setting this to 3, for example would produce scan number 001 on your
  first scan. Integers only and no quotes.

  const numberLength = 3;

  //startingNumber - If you want the scan number to start at something other
  than 1 then change this. Integers only and no quotes.

  const startingNumber = 1;

  //permissionLevel - This sets the default permission level of the scan entry
  (from CONST.DOCUMENT_PERMISSION_LEVELS, use NONE, LIMITED, OBSERVER, or
  OWNER).

  const permissionLevel = CONST.DOCUMENT_PERMISSION_LEVELS.OWNER;

  //updateExisting - This macro will check if a scan journal entry exists and
  update it, set this to false if you want it to create a new scan journal
  entry.

  const updateExisting = true;

  //actorPermissionLevel - This sets the permission level for the parent actor
  of a token (from CONST.DOCUMENT_PERMISSION_LEVELS, use NONE, LIMITED,
  OBSERVER, or OWNER). If set to `null`, no change is made.

  const actorPermissionLevel = null;

  //targets - Gets the data for your currently selected target(s) and stores it
  for later use. Do not change.

  let targets = Array.from(game.user.targets);


  // ===========================================================

  // DO NOT MODIFY BELOW HERE UNLESS YOU KNOW WHAT YOU'RE DOING

  // ===========================================================


  // ======================================================

  //Functions

  // ======================================================


  //zeroPad - Adds a set number 0s to the fed number to produce a consistent
  length number.

  function zeroPad(num, places) {
    return String(num).padStart(places, "0");
  }


  //findItemByType - To find specific items in the .item array.

  function findItemByType(array, itemType) {
    return array.filter(item => item.type === itemType);
  }


  //sort_features - Sorts the feature list for the scanned target

  function sort_features(a, b) {
    return b.system.origin.base - a.system.origin.base;
  }


  //construct_features - Builds out the list of selectable features for the
  scanned target, includes support for exotics.

  function construct_features(items, origin) {
    let sc_list = ``;
    sc_list += `<p>${origin}</p>`;
    let sc_features = items.filter(f => f.system.origin && f.system.origin.name === origin).sort(sort_features);
    sc_features.forEach(i => {
      let sc_name = ``;
      let sc_desc = ``;
      if (i.system.origin.name == "EXOTIC" && !i.system.origin.base) {
        sc_name = '<code class="horus--subtle">UNKNOWN EXOTIC SYSTEM</code>';
        sc_desc = "???";
      } else {
        sc_name = i.name;
        if (i.system.effect) {
          sc_desc = i.system.effect;
        } else {
          sc_desc = "No description given.";
        }
        if (i.system.trigger) {
          sc_desc = `Trigger: ${i.system.trigger}<br>${sc_desc}`;
        }
      }
      let sc_entry = `<details><summary>${sc_name}</summary><p>${sc_desc}</p></details>`;
      sc_list += sc_entry;
    });
    return sc_list;
  }


  function construct_weapons(items, origin, tier) {
    let sc_weapons = ``;
    let sc_features = items
      .filter(i => i.system.origin && i.system.origin.name === origin && i.system.type === "Weapon")
      .sort(sort_features);
    sc_features.forEach(i => {
      let sc_name = ``;
      let sc_desc = ``;
      let sc_entry = ``;
      let sc_range = ``;
      let sc_damage = ``;
      let sc_accuracy = ``;
      if (!i.type) {
        return sc_weapons;
      }
      sc_weapons += `<table>`;
      if (i.system.origin.name == "EXOTIC" && !i.system.origin.base) {
        sc_name = '<tr><th><code class="horus--subtle">UNKNOWN EXOTIC WEAPON</code></th></tr>';
        sc_desc = "<tr><td>???</td></tr>";
        sc_entry = sc_name + sc_desc;
      } else {
        sc_name = `<tr><th colspan="4">${i.name}</th></tr>`;
        sc_entry += sc_name;
        sc_desc = `<tr>`;
        sc_desc += `<td>+${i.system.attack_bonus[tier - 1]} ATTACK</td>`;
        if (i.system.accuracy[tier - 1]) {
          let acc = i.system.accuracy[tier - 1];
          sc_accuracy = `${acc > 0 ? "+" : ""}${acc} ${acc > 0 ? "ACCURACY" : "DIFFICULTY"}`;
        }
        sc_desc += `<td>${sc_accuracy}</td>`;
        if (i.system.range.length > 0) {
          i.system.range.forEach(r => (sc_range += r.type + " " + r.val + "&nbsp&nbsp&nbsp"));
        }
        sc_desc += `<td>${sc_range}</td>`;
        if (i.system.damage.length > 0) {
          i.system.damage[tier - 1].forEach(d => (sc_damage += d.val + " " + d.type + "&nbsp&nbsp&nbsp"));
        }
        sc_desc += `<td>${sc_damage}</td>`;
        if (i.system.tags.some(t => t.is_loading)) {
          if (i.system.loaded) {
            sc_desc += `<td>LOADED</td>`;
          } else {
            sc_desc += `<td>UNLOADED</td>`;
          }
        } else {
          sc_desc += `<td></td>`;
        }
        if (i.system.uses.max > 0) {
          sc_desc += `<td>USES: ${i.system.uses.value}/${i.system.uses.max}</td>`;
        }
        sc_desc += `<tr>`;
        if (i.system.trigger) {
          sc_desc += `<tr><td colspan="6"><details><summary>Trigger</summary><p>${i.system.trigger}</p></details></td></tr>`;
        }
        if (i.system.on_hit) {
          sc_desc += `<tr><td colspan="6"><details><summary>On Hit</summary><p>${i.system.on_hit}</p></details></td></tr>`;
        }
        if (i.system.effect) {
          sc_desc += `<tr><td colspan="6">${i.system.effect}</td></tr>`;
        }
        if (i.system.tags.length > 0) {
          sc_desc += `<tr><td colspan="6">Tags: `;
          sc_desc += i.system.tags.map(t => `${t.name.replace("{VAL}", t.val)}`).join(", ");
          sc_desc += `</td></tr>`;
        }
        sc_entry += sc_desc;
      }
      sc_weapons += sc_entry;
      sc_weapons += `</table>`;
    });
    return sc_weapons;
  }


  //construct_templates

  function construct_templates(items) {
    let templatefind = findItemByType(items, "npc_template");
    let sc_templates = ``;
    let sc_temp = templatefind;
    if (!sc_temp || sc_temp.length == 0) {
      sc_templates += "<p>NONE</p>";
    } else {
      sc_temp.forEach(i => {
        let sc_entry = `<p>${i.name}</p>`;
        sc_templates += sc_entry;
      });
    }
    return sc_templates;
  }


  // Find or create the Scans folder

  let journalFolder = game.folders.getName(journalFolderName);

  if (!journalFolder && journalFolderName.length > 0) {
    try {
      journalFolder = await Folder.create({
        name: journalFolderName,
        type: "JournalEntry",
      });
    } catch (error) {
      ui.notifications.error(
        `${journalFolderName} does not exist and must be created manually by a user with permissions to do so.`
      );
      return;
    }
  }


  // Create the journal for each targeted token

  targets.forEach(async target => {
    let actor = target.actor;
    if (actorPermissionLevel !== null) {
      const actorId = actor.system.parent._id;
      const parentActor = game.actors.get(actorId);
      parentActor.update({ ownership: { default: actorPermissionLevel } });
    }
    console.log("Scanning target:", actor);
    let items = actor.items;
    let hase_table_html = `
  <p><img style="border: 3px dashed #000000; float: left; margin-right: 5px;
  margin-left: 5px;" src="${
      target.document.actor.img
    }" width="30%" height="30%" /></p>
  <div style="color: #000000; width: 65%; float: right; text-align: left;">

  <table>
    <tr>
      <th>HULL</th><th>AGI</th><th>SYS</th><th>ENG</th>
    </tr>
    <tr>
      <td>${actor.system.hull || 0}</td>
      <td>${actor.system.agi || 0}</td>
      <td>${actor.system.sys || 0}</td>
      <td>${actor.system.eng || 0}</td>
    </tr>
  </table> `;
    let stat_table_html = `
  <table>
    <tr>
      <th>Armor</th><th>HP</th><th>Heat</th><th>Speed</th>
    </tr>
    <tr>
      <td>${actor.system.armor}</td>
      <td>${actor.system.hp.value}/${actor.system.hp.max}</td>
      <td>${actor.system.heat.value || 0}/${actor.system.heat.max || 0}</td>
      <td>${actor.system.speed}</td>
    </tr>
    <tr>
      <th>Evasion</th><th>E-Def</th><th>Save</th><th>Sensors</th>
    </tr>
    <tr>
      <td>${actor.system.evasion}</td>
      <td>${actor.system.edef}</td>
      <td>${actor.system.save}</td>
      <td>${actor.system.sensor_range}</td>
    </tr>
    <tr>
      <th>Size</th><th>Activ</th><th>Struct</th><th>Stress</th>
    </tr>
    <tr>
      <td>${actor.system.size}</td>
      <td>${actor.system.activations || 1}</td>
      <td>${actor.system.structure.value || 0}/${actor.system.structure.max || 0}</td>
      <td>${actor.system.stress.value || 0}/${actor.system.stress.max || 0}</td>
    </tr>
  </table> `;
    console.log(items);
    let sc_class = !actor.system.class ? "NONE" : actor.system.class.name;
    let sc_tier = actor.system.tier ? actor.system.tier : 0;
    let sc_templates = construct_templates(items);
    let sc_list = ``;
    let sc_weapons = ``;
    if (!items || items.length == 0) {
      sc_list += "<p>NONE</p>";
      sc_weapons += "<p>NONE</p>";
    } else {
      let sc_origins = [];

      items.forEach(f => {
        let origin = f.system.origin?.name;
        if (origin && !sc_origins.includes(origin)) {
          sc_origins.push(origin);
        }
      });

      sc_origins.forEach(origin => {
        sc_list += construct_features(items, origin);
        sc_weapons += construct_weapons(items, origin, sc_tier);
      });
    }

    if (outputToChat) {
      ChatMessage.create({
        user: game.user._id,
        content: `<h2>Scan results: ${actor.name}</h2>
          <h3>Class: ${sc_class}, Tier ${sc_tier}</h3>
          ${hase_table_html}
          ${stat_table_html}
          <h3>Templates:</h3>
          ${sc_templates}
          <h3>Systems:</h3>
          ${sc_list}`,
      });
    }

    let scanContent =
      `<h2>Scan results: ${actor.name}</h2>` +
      `<h3>Class: ${sc_class}, Tier ${sc_tier}</h3>` +
      hase_table_html +
      stat_table_html +
      `</div><div style="color: #000000; width: 100%; float: right; text-align: left;"><h3>Templates:</h3>` +
      sc_templates +
      `<h3>Weapons:</h3>` +
      sc_weapons +
      `<h3>Systems:</h3>` +
      sc_list +
      `</div>`;

    //This checks and updates the scan entry for the target(s) if a single scan entry exists in the specified folder for the target(s) along with the updateExisting flag.
    //If either are false then this creates a new scan entry.

    let scanObj = {};

    scanObj.folder = journalFolder.id;

    let scanEntry;

    let matchingJournalEntries = journalFolder.contents.filter(e => e.name.match(actor.name));

    if (matchingJournalEntries.length == 1 && updateExisting === true) {
      console.log("Updating an existing scan");
      scanObj.name = matchingJournalEntries[0].name;
      scanObj._id = matchingJournalEntries[0]._id;
      scanObj.text = {
        content: scanContent,
      };
      scanEntry = game.journal.getName(scanObj.name);
      let scanPage = scanEntry.pages.getName(scanObj.name);
      await scanPage.update(scanObj);
    } else {
      console.log("Creating a new scan");
      let scanCount = zeroPad(
        journalFolder.contents.filter(e => e.name.startsWith(nameTemplate)).length + startingNumber,
        numberLength
      );
      scanObj.name = nameTemplate + scanCount + ` - ` + actor.name;
      scanObj.content = scanContent;
      scanEntry = await JournalEntry.create(scanObj);
    }

    scanEntry.update({ permission: { default: permissionLevel } });
    scanEntry.sheet.render(true);
  });
folder: yxTxiLixDsbyThYC
sort: 125000
flags:
  combat-utility-belt:
    macroTrigger: ''
ownership:
  default: 0
  jE81C9hyfb9evTbT: 3
_stats:
  systemId: lancer
  systemVersion: 2.1.5
  coreVersion: '11.315'
  createdTime: null
  modifiedTime: 1720304546588
  lastModifiedBy: VTqqjv3vCWDxBIi5
_key: '!macros!z0pdvwE0FitMzwRJ'
